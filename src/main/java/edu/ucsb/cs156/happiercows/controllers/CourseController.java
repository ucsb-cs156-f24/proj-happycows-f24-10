package edu.ucsb.cs156.happiercows.controllers;

import edu.ucsb.cs156.happiercows.entities.Course;
import edu.ucsb.cs156.happiercows.errors.EntityNotFoundException;
import edu.ucsb.cs156.happiercows.repositories.CourseRepository;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

@Slf4j
@Tag(name = "Course")
@RequestMapping("/api/course")
@RestController
public class CourseController extends ApiController {
    @Autowired
    private CourseRepository courseRepository;

    /**
     * This method returns a list of all courses.
     * 
     * @return a list of all courses
     */
    @Operation(summary = "List all courses")
    @PreAuthorize("hasRole('ROLE_USER')")
    @GetMapping("/all")
    public Iterable<Course> allOrganisations() {
        Iterable<Course> courses = courseRepository.findAll();
        return courses;
    }

    /**
     * This method returns a single course.
     * 
     * @param id the numerical id of the course
     * @return a single course
     */
    @Operation(summary = "Get a single course")
    @PreAuthorize("hasRole('ROLE_USER')")
    @GetMapping("")
    public Course getById(
            @Parameter(name = "id") @RequestParam long id) {
        Course course = courseRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException(Course.class, id));

        return course;
    }

    /**
     * This method creates a new course. Accessible only to users with
     * the role "ROLE_ADMIN".
     * 
     * @param code the course code e.g. CMPSC 156
     * @param name the course name e.g. ADV APP PROGRAMMING
     * @param term the term of the course e.g. f24
     * @return the saved course (with autogenerated id)
     */

    @Operation(summary = "Create a new course")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @PostMapping("/post")
    public Course postCourse(
            @Parameter(name = "code") @RequestParam String code,
            @Parameter(name = "name") @RequestParam String name,
            @Parameter(name = "term") @RequestParam String term) {

        Course course = new Course();
        course.setCode(code);
        course.setName(name);
        course.setTerm(term);

        Course savedCourse = courseRepository.save(course);

        return savedCourse;
    }

    /**
     * Update a single course. Accessible only to users with the role
     * "ROLE_ADMIN".
     * 
     * @param id code of the course to be updated
     * @param incoming the new course contents
     * @return the updated course object
     */
    @Operation(summary = "Update a single course")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @PutMapping("")
    public Course updateCourse(
            @Parameter(name = "id") @RequestParam long id,
            @Parameter(name = "incoming") @RequestBody Course incoming) {

        Course course = courseRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException(Course.class, id));

        course.setCode(incoming.getCode());
        course.setName(incoming.getName());
        course.setTerm(incoming.getTerm());

        courseRepository.save(course);

        return course;
    }

    /**
     * Delete a course. Accessible only to users with the role "ROLE_ADMIN".
     * 
     * @param id id of the course
     * @return a message indiciating the organization was deleted
     */
    @Operation(summary = "Delete a single course")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @DeleteMapping("")
    public Object deleteCourse(
            @Parameter(name = "id") @RequestParam long id) {

        Course course = courseRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException(Course.class, id));

        courseRepository.delete(course);
        return genericMessage("Course with id %s deleted".formatted(id));
    }
}
